Index: asterisk-11.7.0/channels/chan_sip.c
===================================================================
--- asterisk-11.7.0.orig/channels/chan_sip.c
+++ asterisk-11.7.0/channels/chan_sip.c
@@ -17487,7 +17487,7 @@ static enum sip_get_dest_result get_dest
 
 	uri = ast_strdupa(get_in_brackets(tmp));
 
-	if (parse_uri_legacy_check(uri, "sip:,sips:", &uri, &unused_password, &domain, NULL)) {
+	if (parse_uri_legacy_check(uri, "sip:,sips:,tel:", &uri, &unused_password, &domain, NULL)) {
 		ast_log(LOG_WARNING, "Not a SIP header (%s)?\n", uri);
 		return SIP_GET_DEST_INVALID_URI;
 	}
@@ -17515,7 +17515,7 @@ static enum sip_get_dest_result get_dest
 	ast_copy_string(tmpf, sip_get_header(req, "From"), sizeof(tmpf));
 	if (!ast_strlen_zero(tmpf)) {
 		from = get_in_brackets(tmpf);
-		if (parse_uri_legacy_check(from, "sip:,sips:", &from, NULL, &domain, NULL)) {
+		if (parse_uri_legacy_check(from, "sip:,sips:,tel:", &from, NULL, &domain, NULL)) {
 			ast_log(LOG_WARNING, "Not a SIP header (%s)?\n", from);
 			return SIP_GET_DEST_INVALID_URI;
 		}
@@ -18386,7 +18386,7 @@ static enum check_auth_result check_user
 	/* save the URI part of the From header */
 	ast_string_field_set(p, from, of);
 
-	if (parse_uri_legacy_check(of, "sip:,sips:", &name, &unused_password, &domain, NULL)) {
+	if (parse_uri_legacy_check(of, "sip:,sips:,tel:", &name, &unused_password, &domain, NULL)) {
 		ast_log(LOG_NOTICE, "From address missing 'sip:', using it anyway\n");
 	}
 
Index: asterisk-11.7.0/channels/sip/reqresp_parser.c
===================================================================
--- asterisk-11.7.0.orig/channels/sip/reqresp_parser.c
+++ asterisk-11.7.0/channels/sip/reqresp_parser.c
@@ -45,6 +45,7 @@ int parse_uri_full(char *uri, const char
 	char *endparams = NULL;
 	char *c = NULL;
 	int error = 0;
+	int tel_uri = 0;
 
 	/*
 	 * Initialize requested strings - some functions don't care if parse_uri fails
@@ -79,6 +80,9 @@ int parse_uri_full(char *uri, const char
 		for (; !ast_strlen_zero(cur); cur = strsep(&scheme2, ",")) {
 			l = strlen(cur);
 			if (!strncasecmp(uri, cur, l)) {
+				if (!strcasecmp(cur, "tel:")) {
+					tel_uri = 1;
+				}
 				uri += l;
 				break;
 			}
@@ -89,6 +93,25 @@ int parse_uri_full(char *uri, const char
 		}
 	}
 
+	if (tel_uri) {
+		*user = uri;
+
+		if ((c = strchr(uri, ';'))) {
+			*c = '\0';
+		}
+
+		if (params) {
+			params->transport = "";
+			params->user = "";
+			params->method = "";
+			params->ttl = "";
+			params->maddr = "";
+			params->lr = 0;
+		}
+
+		return 0;
+	}
+
 	if (!hostport) {
 		/* if we don't want to split around hostport, keep everything as a
 		 * userinfo - cos thats how old parse_uri operated*/
@@ -375,6 +398,45 @@ AST_TEST_DEFINE(sip_parse_uri_full_test)
 		.params.user = ""
 	};
 
+	struct testdata td11 = {
+		.desc = "tel global uri",
+		.uri = "tel:+1234",
+		.user = "+1234",
+		.pass = "",
+		.hostport = "",
+		.headers = "",
+		.residue = "",
+		.params.transport = "",
+		.params.lr = 0,
+		.params.user = ""
+	};
+
+	struct testdata td12 = {
+		.desc = "tel local uri",
+		.uri = "tel:1234;phone-context=foobar",
+		.user = "1234",
+		.pass = "",
+		.hostport = "",
+		.headers = "",
+		.residue = "",
+		.params.transport = "",
+		.params.lr = 0,
+		.params.user = ""
+	};
+
+	struct testdata td13 = {
+		.desc = "tel global uri with params",
+		.uri = "tel:+1234;isub=42",
+		.user = "+1234",
+		.pass = "",
+		.hostport = "",
+		.headers = "",
+		.residue = "",
+		.params.transport = "",
+		.params.lr = 0,
+		.params.user = ""
+	};
+
 
 	AST_LIST_HEAD_SET_NOLOCK(&testdatalist, &td1);
 	AST_LIST_INSERT_TAIL(&testdatalist, &td2, list);
@@ -386,6 +448,9 @@ AST_TEST_DEFINE(sip_parse_uri_full_test)
 	AST_LIST_INSERT_TAIL(&testdatalist, &td8, list);
 	AST_LIST_INSERT_TAIL(&testdatalist, &td9, list);
 	AST_LIST_INSERT_TAIL(&testdatalist, &td10, list);
+	AST_LIST_INSERT_TAIL(&testdatalist, &td11, list);
+	AST_LIST_INSERT_TAIL(&testdatalist, &td12, list);
+	AST_LIST_INSERT_TAIL(&testdatalist, &td13, list);
 
 
 	switch (cmd) {
@@ -407,7 +472,7 @@ AST_TEST_DEFINE(sip_parse_uri_full_test)
 		params.lr = 0;
 
 		ast_copy_string(uri,testdataptr->uri,sizeof(uri));
-		if (parse_uri_full(uri, "sip:,sips:", &user,
+		if (parse_uri_full(uri, "sip:,sips:,tel:", &user,
 				   &pass, &hostport,
 				   &params,
 				   &headers,
